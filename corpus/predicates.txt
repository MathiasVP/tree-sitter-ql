=======
no-body
=======

predicate foo();

mod::Type foo(int arg, Foo arg);

---

(source_file (ql (moduleBody
  (predicate (head (PREDICATE) (predicateName (lowerId)) (OPAR) (CPAR)) (optbody (SEMI)))
  (predicate (head (type (moduleId (qualId (simpleId (lowerId)))) (SELECTION) (classname (upperId))) (predicateName (lowerId)) (OPAR) (var_decls (var_decl (type (INT)) (simpleId (lowerId))) (COMMA) (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (CPAR)) (optbody (SEMI))))))

================
simple predicate
================

predicate foo(F f){
  f = f
}

int predicateWithResult(){
  result = 43
}

---

(source_file (ql (moduleBody (predicate (head (PREDICATE) (predicateName (lowerId)) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (CPAR)) (optbody (OBRACE) (formula (comparison (expr (primary (variable (varname (simpleId (lowerId)))))) (compop (EQ)) (expr (primary (variable (varname (simpleId (lowerId)))))))) (CBRACE))) (predicate (head (type (INT)) (predicateName (lowerId)) (OPAR) (CPAR)) (optbody (OBRACE) (formula (comparison (expr (primary (variable (RESULT)))) (compop (EQ)) (expr (primary (literal (int)))))) (CBRACE)))))) 

=====================
higher-order relation
=====================

predicate foo() = @name()()
int foo(X x, Y y) = name(pred1/1, pred2/3)(x.x(), result)

---

(source_file (ql (moduleBody
  (predicate (head (PREDICATE) (predicateName (lowerId)) (OPAR) (CPAR)) (optbody (EQ) (literalId (atlowerId)) (OPAR) (CPAR) (OPAR) (CPAR)))
  (predicate (head (type (INT)) (predicateName (lowerId)) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId))) (COMMA) (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (CPAR)) (optbody (EQ) (literalId (lowerId)) (OPAR) (predicateRef (literalId (lowerId))) (SLASH) (int) (COMMA) (predicateRef (literalId (lowerId))) (SLASH) (int) (CPAR) (OPAR) (exprs (expr (primary (callwithresults (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))))) (COMMA) (expr (primary (variable (RESULT))))) (CPAR))))))
