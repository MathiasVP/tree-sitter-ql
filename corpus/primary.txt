======
eparen
======

select (f).getAThing()

---

(source_file 
  (ql 
    (moduleBody 
      (select 
        (SELECT )
        (as_exprs 
          (as_expr 
            (expr 
              (primary 
                (callwithresults 
                  (call 
                    (primary 
                      (eparen 
                        (OPAR )
                        (expr 
                          (primary 
                            (variable 
                              (varname 
                                (simpleId 
                                  (lowerId ))))))
                        (CPAR )))
                    (DOT )
                    (predicateName 
                      (lowerId ))
                    (OPAR )
                    (CPAR )))))))))))

=====
super
=====

select super.foo(), module::Foo.super.foo()

---

(source_file 
  (ql 
    (moduleBody 
      (select 
        (SELECT )
        (as_exprs 
          (as_expr 
            (expr 
              (primary 
                (callwithresults 
                  (call 
                    (primary 
                      (super_expr 
                        (SUPER )))
                    (DOT )
                    (predicateName 
                      (lowerId ))
                    (OPAR )
                    (CPAR ))))))
          (COMMA )
          (as_expr 
            (expr 
              (primary 
                (callwithresults 
                  (call 
                    (primary 
                      (super_expr 
                        (type 
                          (moduleId 
                            (qualId 
                              (simpleId 
                                (lowerId ))))
                          (SELECTION )
                          (classname 
                            (upperId )))
                        (DOT )
                        (SUPER )))
                    (DOT )
                    (predicateName 
                      (lowerId ))
                    (OPAR )
                    (CPAR )))))))))))

============
postfix cast
============

select f.(Foo).thing()

---

(source_file 
  (ql 
    (moduleBody 
      (select 
        (SELECT )
        (as_exprs 
          (as_expr 
            (expr 
              (primary 
                (callwithresults 
                  (call 
                    (primary 
                      (postfix_cast 
                        (primary 
                          (variable 
                            (varname 
                              (simpleId 
                                (lowerId )))))
                        (DOT )
                        (OPAR )
                        (type 
                          (classname 
                            (upperId )))
                        (CPAR )))
                    (DOT )
                    (predicateName 
                      (lowerId ))
                    (OPAR )
                    (CPAR )))))))))))

===
any
===

select
  any(Foo f),
  any(Foo f | f = f),
  any(Foo f | | f.thing()),
  any(Foo f | f = f | f.thing())

---

(source_file 
  (ql 
    (moduleBody 
      (select 
        (SELECT )
        (as_exprs 
          (as_expr 
            (expr 
              (primary 
                (any 
                  (ANY )
                  (OPAR )
                  (var_decls 
                    (var_decl 
                      (type 
                        (classname 
                          (upperId )))
                      (simpleId 
                        (lowerId ))))
                  (CPAR )))))
          (COMMA )
          (as_expr 
            (expr 
              (primary 
                (any 
                  (ANY )
                  (OPAR )
                  (var_decls 
                    (var_decl 
                      (type 
                        (classname 
                          (upperId )))
                      (simpleId 
                        (lowerId ))))
                  (BAR )
                  (formula 
                    (comparison 
                      (expr 
                        (primary 
                          (variable 
                            (varname 
                              (simpleId 
                                (lowerId ))))))
                      (compop (EQ))
                      (expr 
                        (primary 
                          (variable 
                            (varname 
                              (simpleId 
                                (lowerId ))))))))
                  (CPAR )))))
          (COMMA )
          (as_expr 
            (expr 
              (primary 
                (any 
                  (ANY )
                  (OPAR )
                  (var_decls 
                    (var_decl 
                      (type 
                        (classname 
                          (upperId )))
                      (simpleId 
                        (lowerId ))))
                  (BAR )
                  (BAR )
                  (expr 
                    (primary 
                      (callwithresults 
                        (call 
                          (primary 
                            (variable 
                              (varname 
                                (simpleId 
                                  (lowerId )))))
                          (DOT )
                          (predicateName 
                            (lowerId ))
                          (OPAR )
                          (CPAR )))))
                  (CPAR )))))
          (COMMA )
          (as_expr 
            (expr 
              (primary 
                (any 
                  (ANY )
                  (OPAR )
                  (var_decls 
                    (var_decl 
                      (type 
                        (classname 
                          (upperId )))
                      (simpleId 
                        (lowerId ))))
                  (BAR )
                  (formula 
                    (comparison 
                      (expr 
                        (primary 
                          (variable 
                            (varname 
                              (simpleId 
                                (lowerId ))))))
                      (compop (EQ))
                      (expr 
                        (primary 
                          (variable 
                            (varname 
                              (simpleId 
                                (lowerId ))))))))
                  (BAR )
                  (expr 
                    (primary 
                      (callwithresults 
                        (call 
                          (primary 
                            (variable 
                              (varname 
                                (simpleId 
                                  (lowerId )))))
                          (DOT )
                          (predicateName 
                            (lowerId ))
                          (OPAR )
                          (CPAR )))))
                  (CPAR ))))))))))

=====
range
=====

select [0..10]

---

(source_file 
  (ql 
    (moduleBody 
      (select 
        (SELECT )
        (as_exprs 
          (as_expr 
            (expr 
              (primary 
                (range 
                  (OBLOCK )
                  (expr 
                    (primary 
                      (literal 
                        (int ))))
                  (RANGE )
                  (expr 
                    (primary 
                      (literal 
                        (int ))))
                  (CBLOCK ))))))))))

==========
aggregates
==========

select
  rank[123](Foo f),
  count(f.thing()),
  count(f.thing() as thing order by thing asc, thing desc),
  count(Foo f),
  count(Foo f | f.thing() ),
  sum(Foo f | | f.x() ),
  sum(Foo f | | f.x() as x),
  sum(Foo f | | f.x() as x order by x),
  sum(Foo f | | f.x() as x order by x asc, f.y()),
  sum(Foo f | f.thing() | f.x() )

---

(source_file (ql (moduleBody (select (SELECT) (as_exprs (as_expr (expr (primary (aggregation (aggid (RANK)) (OBLOCK) (expr (primary (literal (int)))) (CBLOCK) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (CPAR))))) (COMMA) (as_expr (expr (primary (aggregation (aggid (COUNT)) (OPAR) (as_exprs (as_expr (expr (primary (callwithresults (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))))))) (CPAR))))) (COMMA) (as_expr (expr (primary (aggregation (aggid (COUNT)) (OPAR) (as_exprs (as_expr (expr (primary (callwithresults (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))))) (AS) (simpleId (lowerId)))) (ORDER) (BY) (aggorderbys (aggorderby (expr (primary (variable (varname (simpleId (lowerId)))))) (ASC)) (COMMA) (aggorderby (expr (primary (variable (varname (simpleId (lowerId)))))) (DESC))) (CPAR))))) (COMMA) (as_expr (expr (primary (aggregation (aggid (COUNT)) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (CPAR))))) (COMMA) (as_expr (expr (primary (aggregation (aggid (COUNT)) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (BAR) (formula (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))) (CPAR))))) (COMMA) (as_expr (expr (primary (aggregation (aggid (SUM)) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (BAR) (BAR) (as_exprs (as_expr (expr (primary (callwithresults (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))))))) (CPAR))))) (COMMA) (as_expr (expr (primary (aggregation (aggid (SUM)) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (BAR) (BAR) (as_exprs (as_expr (expr (primary (callwithresults (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))))) (AS) (simpleId (lowerId)))) (CPAR))))) (COMMA) (as_expr (expr (primary (aggregation (aggid (SUM)) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (BAR) (BAR) (as_exprs (as_expr (expr (primary (callwithresults (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))))) (AS) (simpleId (lowerId)))) (ORDER) (BY) (aggorderbys (aggorderby (expr (primary (variable (varname (simpleId (lowerId)))))))) (CPAR))))) (COMMA) (as_expr (expr (primary (aggregation (aggid (SUM)) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (BAR) (BAR) (as_exprs (as_expr (expr (primary (callwithresults (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))))) (AS) (simpleId (lowerId)))) (ORDER) (BY) (aggorderbys (aggorderby (expr (primary (variable (varname (simpleId (lowerId)))))) (ASC)) (COMMA) (aggorderby (expr (primary (callwithresults (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))))))) (CPAR))))) (COMMA) (as_expr (expr (primary (aggregation (aggid (SUM)) (OPAR) (var_decls (var_decl (type (classname (upperId))) (simpleId (lowerId)))) (BAR) (formula (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))) (BAR) (as_exprs (as_expr (expr (primary (callwithresults (call (primary (variable (varname (simpleId (lowerId))))) (DOT) (predicateName (lowerId)) (OPAR) (CPAR))))))) (CPAR))))))))))